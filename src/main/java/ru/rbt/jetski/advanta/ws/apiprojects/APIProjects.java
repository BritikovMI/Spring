
package ru.rbt.jetski.advanta.ws.apiprojects;

import javax.xml.namespace.QName;
import javax.xml.ws.*;
import java.net.MalformedURLException;
import java.net.URL;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "APIProjects", targetNamespace = "http://streamline/", wsdlLocation = "https://rbtn.a2nta.ru/components/services/APIProjects.asmx?WSDL")
public class APIProjects
    extends Service
{

    private final static URL APIPROJECTS_WSDL_LOCATION;
    private final static WebServiceException APIPROJECTS_EXCEPTION;
    private final static QName APIPROJECTS_QNAME = new QName("http://streamline/", "APIProjects");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("https://rbtn.a2nta.ru/components/services/APIProjects.asmx?WSDL");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        APIPROJECTS_WSDL_LOCATION = url;
        APIPROJECTS_EXCEPTION = e;
    }

    public APIProjects() {
        super(__getWsdlLocation(), APIPROJECTS_QNAME);
    }

    public APIProjects(WebServiceFeature... features) {
        super(__getWsdlLocation(), APIPROJECTS_QNAME, features);
    }

    public APIProjects(URL wsdlLocation) {
        super(wsdlLocation, APIPROJECTS_QNAME);
    }

    public APIProjects(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, APIPROJECTS_QNAME, features);
    }

    public APIProjects(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public APIProjects(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns APIProjectsSoap
     */
    @WebEndpoint(name = "APIProjectsSoap")
    public APIProjectsSoap getAPIProjectsSoap() {
        return super.getPort(new QName("http://streamline/", "APIProjectsSoap"), APIProjectsSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns APIProjectsSoap
     */
    @WebEndpoint(name = "APIProjectsSoap")
    public APIProjectsSoap getAPIProjectsSoap(WebServiceFeature... features) {
        return super.getPort(new QName("http://streamline/", "APIProjectsSoap"), APIProjectsSoap.class, features);
    }

    /**
     *
     * @return
     *     returns APIProjectsSoap
     */
    @WebEndpoint(name = "APIProjectsSoap12")
    public APIProjectsSoap getAPIProjectsSoap12() {
        return super.getPort(new QName("http://streamline/", "APIProjectsSoap12"), APIProjectsSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns APIProjectsSoap
     */
    @WebEndpoint(name = "APIProjectsSoap12")
    public APIProjectsSoap getAPIProjectsSoap12(WebServiceFeature... features) {
        return super.getPort(new QName("http://streamline/", "APIProjectsSoap12"), APIProjectsSoap.class, features);
    }

    /**
     *
     * @return
     *     returns APIProjectsHttpPost
     */
    @WebEndpoint(name = "APIProjectsHttpPost")
    public APIProjectsHttpPost getAPIProjectsHttpPost() {
        return super.getPort(new QName("http://streamline/", "APIProjectsHttpPost"), APIProjectsHttpPost.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns APIProjectsHttpPost
     */
    @WebEndpoint(name = "APIProjectsHttpPost")
    public APIProjectsHttpPost getAPIProjectsHttpPost(WebServiceFeature... features) {
        return super.getPort(new QName("http://streamline/", "APIProjectsHttpPost"), APIProjectsHttpPost.class, features);
    }

    private static URL __getWsdlLocation() {
        if (APIPROJECTS_EXCEPTION!= null) {
            throw APIPROJECTS_EXCEPTION;
        }
        return APIPROJECTS_WSDL_LOCATION;
    }

}
